import React, { useState, useEffect } from "react";
import axios from "axios";

export default function ScheduleManagement() {
    const [schedules, setSchedules] = useState([]);
    const [showForm, setShowForm] = useState(false);
    const [selectedUser, setSelectedUser] = useState(null);
    const [formData, setFormData] = useState({
        componentType: "",
        quantity: "",
        hospital: ""
    });
    const [hospitals, setHospitals] = useState([]);
    const [showAlert, setShowAlert] = useState(false);
    const [alertMessage, setAlertMessage] = useState("");




    const fetchSchedules = async () => {
        try {
            const token = localStorage.getItem("token");
            if (!token) return;
            const res = await axios.get("http://localhost:8080/api/donor", {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });

            setSchedules(res.data);
        } catch (err) {
            console.error(" Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi hi·∫øn:", err.response?.status, err.response?.data || err.message);
        }
    };

    const fetchHospitals = async () => {
        try {
            const token = localStorage.getItem("token");
            if (!token) return;
            const res = await axios.get("http://localhost:8080/api/hospitals", {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });

            console.log(" Danh s√°ch b·ªánh vi·ªán:", res.data);
            setHospitals(res.data);
        } catch (err) {
            console.error(" L·ªói khi l·∫•y danh s√°ch b·ªánh vi·ªán:", err.response?.status, err.response?.data || err.message);
        }
    };

    useEffect(() => {
        fetchSchedules();
        fetchHospitals();
    }, []);

    const openContactForm = (user) => {
        setSelectedUser(user);
        setShowForm(true);
    };

    const closeForm = () => {
        setShowForm(false);
        setSelectedUser(null);
        setFormData({
            componentType: "",
            quantity: "",
            hospital: ""
        });
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    // POST g·ª≠i y√™u c·∫ßu c·∫ßn m√°u
    const handleSubmit = async () => {
        if (!formData.componentType || !formData.quantity || !formData.hospital) {
            return;
        }
        const donorId = selectedUser?.donorId;
        console.log("üîç donorId:", donorId);



        const payload = {
            componentType: formData.componentType,
            quantity: formData.quantity,
            hospitalId: formData.hospital
        };

        //  T√¨m t√™n b·ªánh vi·ªán t·ª´ ID ƒë·ªÉ console.log
        const selectedHospital = hospitals.find(
            h => h.id === parseInt(formData.hospital)
        );
        console.log(" B·ªánh vi·ªán ƒë√£ ch·ªçn:", selectedHospital?.hospitalName);
        closeForm();

        try {
            const token = localStorage.getItem("token");
            if (!token) return;
            const res = await axios.post(
                `http://localhost:8080/api/emergency-requests/no-available-blood?donorId=${donorId}`,
                payload,
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );


            console.log(" Request success:", res.data);

            setAlertMessage("ƒê√£ g·ª≠i y√™u c·∫ßu th√†nh c√¥ng!");
            setShowAlert(true);
            setTimeout(() => setShowAlert(false), 5000); // 3 gi√¢y ·∫©n
        } catch (err) {
            console.error("‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu:", err.response?.data || err.message);
            setAlertMessage("G·ª≠i th·∫•t b·∫°i!");
            setShowAlert(true);
            setTimeout(() => setShowAlert(false), 5000);

        }
    };

    return (

        <div className="schedule-management">
            <h2>Y√™u c·∫ßu h·ªó tr·ª£ m√°u	</h2>

            <table className="schedule-table" >
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>H·ªç v√† t√™n</th>
                        <th>Ng√†y hi·∫øn m√°u</th>
                        <th>Nh√≥m m√°u</th>
                        <th>Li√™n h·ªá</th>
                    </tr>
                </thead>
                <tbody>
                    {schedules.map((sch, index) => (
                        <tr key={sch.donorId}>
                            <td>{index + 1}</td>
                            <td>{sch.name}</td>
                            <td>{new Date(sch.readyTime).toLocaleDateString("vi-VN")}</td>
                            <td>{sch.bloodType}</td>
                            <td>
                                <button onClick={() => openContactForm(sch)}>
                                    Li√™n h·ªá
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>


            </table>

            {/*Form Popup */}
            {
                showForm && (

                    <div className="overlay">
                        <div className="contact-form">
                            <h3>Li√™n h·ªá ng∆∞·ªùi hi·∫øn	</h3>
                            <p>Ng∆∞·ªùi nh·∫≠n: <strong>{selectedUser?.name}</strong></p>

                            <label>Th√†nh ph·∫ßn m√°u:</label>
                            <select
                                name="componentType"
                                value={formData.componentType}
                                onChange={handleInputChange}
                            >
                                <option value="">-- Ch·ªçn lo·∫°i th√†nh ph·∫ßn m√°u --</option>
                                <option value="Whole" >To√†n ph·∫ßn</option>
                                <option value="RBC"  >H·ªìng C·∫ßu </option>
                                <option value="Plasma"  >Huy·∫øt t∆∞∆°ng</option>
                                <option value="Platelet"  > Ti·ªÉu c·∫ßu</option>
                            </select>

                            <label>S·ªë t√∫i m√°u:</label>
                            <input
                                type="number"
                                name="quantity"
                                min={1}
                                max={3}
                                value={formData.quantity}
                                onChange={handleInputChange}
                                placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng t√∫i"
                            />

                            <label>T√™n b·ªánh vi·ªán:</label>
                            <select
                                name="hospital"
                                value={formData.hospital}
                                onChange={handleInputChange}
                            >
                                <option value="">-- Ch·ªçn b·ªánh vi·ªán --</option>
                                {hospitals.map(h => (
                                    <option key={h.hospitalId} value={h.hospitalId}>
                                        {h.hospitalName}
                                    </option>
                                ))}
                            </select>

                            <div className="form-buttons">
                                <button onClick={handleSubmit}>G·ª≠i</button>
                                <button onClick={closeForm} className="cancel">ƒê√≥ng</button>
                            </div>
                        </div>
                    </div>
                )
            }
            {/* Hi·ªÉn th·ªã alert ·ªü g√≥c tr√°i d∆∞·ªõi */}
            {showAlert && (
                <div className="custom-alert">
                    {alertMessage}
                </div>
            )}
        </div >
    );
}
